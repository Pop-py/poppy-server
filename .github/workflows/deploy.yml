name: CI/CD

# main branch에 push 될 때 실행
on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: gradlew에 실행 권한 부여
        run: chmod +x ./gradlew

      - name: yml 파일 설정
        run: |
          touch ./docker-compose.yml
          echo "$DOCKER_COMPOSE_YML" > ./docker-compose.yml
          cd ./src/main
          mkdir -p resources
          cd ./resources
          touch ./application.yml
          echo "$APPLICATION_YML" > ./application.yml
          touch ./firebase-service-account.json
          echo "${FIREBASE_YML}" > ./firebase-service-account.json
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
          DOCKER_COMPOSE_YML: ${{ secrets.DOCKER_COMPOSE_YML }}
          FIREBASE_YML: ${{ secrets.FIREBASE_JSON }}
        shell: bash

      - name: 빌드 실행
        run: ./gradlew clean build -x test

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: poppyserver/poppy:latest

      - name: AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: EC2에 Docker Compose 배포
        run: |
          echo "$DOCKER_COMPOSE_YML" > docker-compose.yml
          aws s3 cp docker-compose.yml s3://poppy-server-bucket/docker-compose.yml
          
          aws ssm send-command \
            --instance-ids i-01991812d9b9ff3b2 \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'cd /home/ubuntu',
              'aws s3 cp s3://poppy-server-bucket/docker-compose.yml .',
              'sudo docker compose down',
              'sudo docker rmi poppyserver/poppy:latest || true',
              'sudo docker pull poppyserver/poppy:latest',
              'sudo docker tag poppyserver/poppy:latest poppy',
              'sudo docker compose up -d'
            ]" --output text
          
#          aws ssm send-command \
#            --instance-ids i-06b3478042177ee5f \
#            --document-name "AWS-RunShellScript" \
#            --parameters "commands=[
#              'cd /home/ubuntu',
#              'aws s3 cp s3://poppy-server-bucket/docker-compose.yml .',
#              'sudo docker compose down',
#              'sudo docker rmi poppyserver/poppy:latest || true',
#              'sudo docker pull poppyserver/poppy:latest',
#              'sudo docker tag poppyserver/poppy:latest poppy',
#              'sudo docker compose up -d'
#            ]" --output text
        env:
          DOCKER_COMPOSE_YML: ${{ secrets.DOCKER_COMPOSE_YML }}
